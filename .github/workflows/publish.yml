name: Publish

on:
  push:
    branches:
      - main

jobs:
  configure-git:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    permissions:
      contents: write
      discussions: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Git user
        run: |
          git config --global user.email "suyashpandey152@gmail.com"
          git config --global user.name "usersuyashpandey"

      - name: Navigate to release/app directory and run patch
        id: version
        run: |
          cd release/app
          npm version patch
          echo "::set-output name=version::$(node -p "require('./package.json').version")"
          echo "NEW_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          ls
      - name: Show version
        run: |
          echo "Version after patch: ${{ steps.version.outputs.version }}"

      # - name: Run patch version
      #   run: |
      #     npm version patch

      - name: List files in dist directory
        run: ls

      # - name: Extract version
      #   id: version
      #   run: |
      #     NEW_VERSION=$(node -p 'require("./release/app/package.json").version')
      #     echo "New version $NEW_VERSION detected"
      #     echo "::set-output name=version::$NEW_VERSION"

      # - name: Create a git tag
      #   if: env.NEW_VERSION
      #   run: |
      #     git tag v${NEW_VERSION}
      #     git push --tags
      #   env:
      #     NEW_VERSION: ${{ env.NEW_VERSION }}

  #     - name: Merge version bump commit
  #       run: |
  #         git fetch origin main
  #         git checkout main
  #         git merge --ff-only HEAD@{1}

  #     - name: Push merged changes
  #       run: git push origin main
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  #     - name: Pull latest changes
  #       run: git pull origin main

  # publish:
  #   runs-on: ${{ matrix.os }}

  #   permissions:
  #     contents: write
  #     discussions: write

  #   needs: configure-git

  #   strategy:
  #     matrix:
  #       os: [macos-latest]

  #   steps:
  #     - name: Checkout git repo
  #       uses: actions/checkout@v3

  #     - name: Install Node and NPM
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #         cache: npm

  #     - name: Pull latest changes
  #       run: git pull origin main

  #     - name: Print NEW_VERSION
  #       run: echo "NEW_VERSION is v${{ needs.configure-git.outputs.version }}"

  # - name: Install and build
  #   run: |
  #     npm install --force
  #     npm run postinstall
  #     npm run build

  # - name: Publish releases
  #   env:
  #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
  #   run: |
  #     npm exec electron-builder -- --publish always --win --mac
